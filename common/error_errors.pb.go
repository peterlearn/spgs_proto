// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package common

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 1-99	常见公用错误码
func IsErrCodeNone(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrCode_ErrCodeNone.String() && e.Code == 520
}

// 1-99	常见公用错误码
func ErrorErrCodeNone(format string, args ...interface{}) *errors.Error {
	return errors.New(520, ErrCode_ErrCodeNone.String(), fmt.Sprintf(format, args...))
}

// 非法参数
func IsInvalidParams(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrCode_InvalidParams.String() && e.Code == 520
}

// 非法参数
func ErrorInvalidParams(format string, args ...interface{}) *errors.Error {
	return errors.New(520, ErrCode_InvalidParams.String(), fmt.Sprintf(format, args...))
}

// token失效
func IsTokenFailure(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrCode_TokenFailure.String() && e.Code == 520
}

// token失效
func ErrorTokenFailure(format string, args ...interface{}) *errors.Error {
	return errors.New(520, ErrCode_TokenFailure.String(), fmt.Sprintf(format, args...))
}

// redis错误
func IsRedisError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrCode_RedisError.String() && e.Code == 520
}

// redis错误
func ErrorRedisError(format string, args ...interface{}) *errors.Error {
	return errors.New(520, ErrCode_RedisError.String(), fmt.Sprintf(format, args...))
}

// riak错误
func IsRiakError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrCode_RiakError.String() && e.Code == 520
}

// riak错误
func ErrorRiakError(format string, args ...interface{}) *errors.Error {
	return errors.New(520, ErrCode_RiakError.String(), fmt.Sprintf(format, args...))
}

// mysql错误
func IsMysqlError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrCode_MysqlError.String() && e.Code == 520
}

// mysql错误
func ErrorMysqlError(format string, args ...interface{}) *errors.Error {
	return errors.New(520, ErrCode_MysqlError.String(), fmt.Sprintf(format, args...))
}

// mongodb错误
func IsMGError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrCode_MGError.String() && e.Code == 520
}

// mongodb错误
func ErrorMGError(format string, args ...interface{}) *errors.Error {
	return errors.New(520, ErrCode_MGError.String(), fmt.Sprintf(format, args...))
}

// merchantName wrong
func IsInvalidMerchantName(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrCode_InvalidMerchantName.String() && e.Code == 520
}

// merchantName wrong
func ErrorInvalidMerchantName(format string, args ...interface{}) *errors.Error {
	return errors.New(520, ErrCode_InvalidMerchantName.String(), fmt.Sprintf(format, args...))
}

// merchantCode wrong
func IsInvalidMerchantCode(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrCode_InvalidMerchantCode.String() && e.Code == 520
}

// merchantCode wrong
func ErrorInvalidMerchantCode(format string, args ...interface{}) *errors.Error {
	return errors.New(520, ErrCode_InvalidMerchantCode.String(), fmt.Sprintf(format, args...))
}

// merchant被锁
func IsMerchantNameLock(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrCode_MerchantNameLock.String() && e.Code == 520
}

// merchant被锁
func ErrorMerchantNameLock(format string, args ...interface{}) *errors.Error {
	return errors.New(520, ErrCode_MerchantNameLock.String(), fmt.Sprintf(format, args...))
}

// merchant不存在
func IsGetMerchantError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrCode_GetMerchantError.String() && e.Code == 520
}

// merchant不存在
func ErrorGetMerchantError(format string, args ...interface{}) *errors.Error {
	return errors.New(520, ErrCode_GetMerchantError.String(), fmt.Sprintf(format, args...))
}

// 内部错误
func IsSystemError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrCode_SystemError.String() && e.Code == 520
}

// 内部错误
func ErrorSystemError(format string, args ...interface{}) *errors.Error {
	return errors.New(520, ErrCode_SystemError.String(), fmt.Sprintf(format, args...))
}

// api维护中
func IsMaintainError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrCode_MaintainError.String() && e.Code == 520
}

// api维护中
func ErrorMaintainError(format string, args ...interface{}) *errors.Error {
	return errors.New(520, ErrCode_MaintainError.String(), fmt.Sprintf(format, args...))
}

// 代理维护中
func IsMaintainAgentError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrCode_MaintainAgentError.String() && e.Code == 520
}

// 代理维护中
func ErrorMaintainAgentError(format string, args ...interface{}) *errors.Error {
	return errors.New(520, ErrCode_MaintainAgentError.String(), fmt.Sprintf(format, args...))
}
