// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package common

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 1-99	常见公用错误码
func IsErrCodeNone(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrCode_ErrCodeNone.String() && e.Code == 520
}

// 1-99	常见公用错误码
func ErrorErrCodeNone(format string, args ...interface{}) *errors.Error {
	return errors.New(520, ErrCode_ErrCodeNone.String(), fmt.Sprintf(format, args...))
}

// 非法参数
func IsInvalidParams(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrCode_InvalidParams.String() && e.Code == 1
}

// 非法参数
func ErrorInvalidParams(format string, args ...interface{}) *errors.Error {
	return errors.New(1, ErrCode_InvalidParams.String(), fmt.Sprintf(format, args...))
}

// redis错误
func IsRedisError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrCode_RedisError.String() && e.Code == 2
}

// redis错误
func ErrorRedisError(format string, args ...interface{}) *errors.Error {
	return errors.New(2, ErrCode_RedisError.String(), fmt.Sprintf(format, args...))
}

// token失效
func IsTokenFailure(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrCode_TokenFailure.String() && e.Code == 3
}

// token失效
func ErrorTokenFailure(format string, args ...interface{}) *errors.Error {
	return errors.New(3, ErrCode_TokenFailure.String(), fmt.Sprintf(format, args...))
}

// riak错误
func IsRiakError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrCode_RiakError.String() && e.Code == 4
}

// riak错误
func ErrorRiakError(format string, args ...interface{}) *errors.Error {
	return errors.New(4, ErrCode_RiakError.String(), fmt.Sprintf(format, args...))
}

// merchantName wrong
func IsInvalidMerchantName(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrCode_InvalidMerchantName.String() && e.Code == 48
}

// merchantName wrong
func ErrorInvalidMerchantName(format string, args ...interface{}) *errors.Error {
	return errors.New(48, ErrCode_InvalidMerchantName.String(), fmt.Sprintf(format, args...))
}

// merchantCode wrong
func IsInvalidMerchantCode(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrCode_InvalidMerchantCode.String() && e.Code == 49
}

// merchantCode wrong
func ErrorInvalidMerchantCode(format string, args ...interface{}) *errors.Error {
	return errors.New(49, ErrCode_InvalidMerchantCode.String(), fmt.Sprintf(format, args...))
}

// merchant被锁
func IsMerchantNameLock(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrCode_MerchantNameLock.String() && e.Code == 50
}

// merchant被锁
func ErrorMerchantNameLock(format string, args ...interface{}) *errors.Error {
	return errors.New(50, ErrCode_MerchantNameLock.String(), fmt.Sprintf(format, args...))
}

// merchant不存在
func IsGetMerchantError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrCode_GetMerchantError.String() && e.Code == 51
}

// merchant不存在
func ErrorGetMerchantError(format string, args ...interface{}) *errors.Error {
	return errors.New(51, ErrCode_GetMerchantError.String(), fmt.Sprintf(format, args...))
}
