// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: api/api_test.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TestService_Hello_FullMethodName          = "/api.TestService/Hello"
	TestService_TestRiakStore_FullMethodName  = "/api.TestService/TestRiakStore"
	TestService_TestRiakFetch_FullMethodName  = "/api.TestService/TestRiakFetch"
	TestService_TestRiakDelete_FullMethodName = "/api.TestService/TestRiakDelete"
)

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServiceClient interface {
	// 发送消息
	Hello(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HelloResp, error)
	// riak存储
	TestRiakStore(ctx context.Context, in *RiakStoreReq, opts ...grpc.CallOption) (*RiakStoreResp, error)
	// 获取riak数据
	TestRiakFetch(ctx context.Context, in *RiakFetchReq, opts ...grpc.CallOption) (*RiakFetchResp, error)
	// 删除riak数据
	TestRiakDelete(ctx context.Context, in *RiakDeleteReq, opts ...grpc.CallOption) (*RiakDeleteResp, error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) Hello(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HelloResp, error) {
	out := new(HelloResp)
	err := c.cc.Invoke(ctx, TestService_Hello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) TestRiakStore(ctx context.Context, in *RiakStoreReq, opts ...grpc.CallOption) (*RiakStoreResp, error) {
	out := new(RiakStoreResp)
	err := c.cc.Invoke(ctx, TestService_TestRiakStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) TestRiakFetch(ctx context.Context, in *RiakFetchReq, opts ...grpc.CallOption) (*RiakFetchResp, error) {
	out := new(RiakFetchResp)
	err := c.cc.Invoke(ctx, TestService_TestRiakFetch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) TestRiakDelete(ctx context.Context, in *RiakDeleteReq, opts ...grpc.CallOption) (*RiakDeleteResp, error) {
	out := new(RiakDeleteResp)
	err := c.cc.Invoke(ctx, TestService_TestRiakDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServiceServer is the server API for TestService service.
// All implementations must embed UnimplementedTestServiceServer
// for forward compatibility
type TestServiceServer interface {
	// 发送消息
	Hello(context.Context, *Empty) (*HelloResp, error)
	// riak存储
	TestRiakStore(context.Context, *RiakStoreReq) (*RiakStoreResp, error)
	// 获取riak数据
	TestRiakFetch(context.Context, *RiakFetchReq) (*RiakFetchResp, error)
	// 删除riak数据
	TestRiakDelete(context.Context, *RiakDeleteReq) (*RiakDeleteResp, error)
	mustEmbedUnimplementedTestServiceServer()
}

// UnimplementedTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestServiceServer struct {
}

func (UnimplementedTestServiceServer) Hello(context.Context, *Empty) (*HelloResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedTestServiceServer) TestRiakStore(context.Context, *RiakStoreReq) (*RiakStoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestRiakStore not implemented")
}
func (UnimplementedTestServiceServer) TestRiakFetch(context.Context, *RiakFetchReq) (*RiakFetchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestRiakFetch not implemented")
}
func (UnimplementedTestServiceServer) TestRiakDelete(context.Context, *RiakDeleteReq) (*RiakDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestRiakDelete not implemented")
}
func (UnimplementedTestServiceServer) mustEmbedUnimplementedTestServiceServer() {}

// UnsafeTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServiceServer will
// result in compilation errors.
type UnsafeTestServiceServer interface {
	mustEmbedUnimplementedTestServiceServer()
}

func RegisterTestServiceServer(s grpc.ServiceRegistrar, srv TestServiceServer) {
	s.RegisterService(&TestService_ServiceDesc, srv)
}

func _TestService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).Hello(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_TestRiakStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiakStoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).TestRiakStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_TestRiakStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).TestRiakStore(ctx, req.(*RiakStoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_TestRiakFetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiakFetchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).TestRiakFetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_TestRiakFetch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).TestRiakFetch(ctx, req.(*RiakFetchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_TestRiakDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiakDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).TestRiakDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_TestRiakDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).TestRiakDelete(ctx, req.(*RiakDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TestService_ServiceDesc is the grpc.ServiceDesc for TestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _TestService_Hello_Handler,
		},
		{
			MethodName: "TestRiakStore",
			Handler:    _TestService_TestRiakStore_Handler,
		},
		{
			MethodName: "TestRiakFetch",
			Handler:    _TestService_TestRiakFetch_Handler,
		},
		{
			MethodName: "TestRiakDelete",
			Handler:    _TestService_TestRiakDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api_test.proto",
}
